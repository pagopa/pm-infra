# only manual
trigger: none
pr: none

parameters:
  - name: 'DEV'
    displayName: 'Run on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT'
    displayName: 'Run on UAT environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'PROD'
    displayName: 'Run on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 5

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v17
      endpoint: 'pipeline-deploy-token-ro'

stages:
  # DEV
#  - stage: plan_DEV
#    dependsOn: []
#    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
#    pool:
#      name: product-dev-linux
#    jobs:
#      - job: plan
#        timeoutInMinutes: $[variables.TIME_OUT]
#        steps:
#          # 1. Install terraform
#          - template: templates/terraform-setup/template.yaml@terraform
#          # 2. Run terraform plan
#          - template: templates/terraform-plan/template.yaml@terraform
#            parameters:
#              SUBSCRIPTION: DEV-PM-SERVICE-CONN
#              ENVIRONMENT: dev
#              WORKINGDIR: 'src/pmanager/network'
#
#  - stage: apply_DEV
#    dependsOn: [plan_DEV]
#    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
#    pool:
#      name: product-dev-linux
#    jobs:
#      # - job: init
#      #   steps:
#      #     # 1. Install terraform
#      #     - template: templates/terraform-setup/template.yaml@terraform
#      - deployment: apply
#        continueOnError: false
#        # dependsOn: init
#        environment: 'DEV'
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - checkout: self
#                # 3. Run terraform apply
#                - template: templates/terraform-apply/template.yaml@terraform
#                  parameters:
#                    SUBSCRIPTION: DEV-PM-SERVICE-CONN
#                    ENVIRONMENT: dev
#                    WORKINGDIR: 'src/pmanager/network'

  # UAT
  - stage: plan_network_UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-PM-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/pmanager/network'
  - stage: plan_appservice_UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-PM-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/pmanager/app_services'
  - stage: plan_appgateway_UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-PM-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/pmanager/appgw'
  - stage: plan_vm_database_UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-PM-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/pmanager/vm-database'                                          

  - stage: apply_network_UAT
    dependsOn: [plan_network_UAT]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
      # - job: apply_network
      #   steps:
      #     # 1. Install terraform
      #     - template: templates/terraform-setup/template.yaml@terraform
      - deployment: apply
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-PM-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/pmanager/network'

  - stage: apply_appservice_UAT
    dependsOn: [apply_network_UAT,plan_appservice_UAT]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:
        #- job: apply_appservices
        #  steps:
        #     # 1. Install terraform
        #     - template: templates/terraform-setup/template.yaml@terraform
      - deployment: apply
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-PM-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/pmanager/app_services'      
  - stage: apply_appgateway_UAT
    dependsOn: [apply_network_UAT,plan_appgateway_UAT]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:                    
        #- job: apply_appgateway
        #  steps:
        #     # 1. Install terraform
        #     - template: templates/terraform-setup/template.yaml@terraform
      - deployment: apply
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-PM-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/pmanager/appgw'    
  - stage: apply_vm_database_UAT
    dependsOn: [apply_network_UAT,plan_vm_database_UAT]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pm-agent-pool-uat
    jobs:                      
      #- job: apply_vm-database
      #  steps:
      #     # 1. Install terraform
      #     - template: templates/terraform-setup/template.yaml@terraform
      - deployment: apply
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-PM-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/pmanager/vm-database'                                                             

  # PROD
#  - stage: plan_PROD
#    dependsOn: []
#    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
#    pool:
#      name: product-prod-linux
#    jobs:
#      - job: plan
#        timeoutInMinutes: $[variables.TIME_OUT]
#        steps:
#          # 1. Install terraform
#          - template: templates/terraform-setup/template.yaml@terraform
#          # 2. Run terraform plan
#          - template: templates/terraform-plan/template.yaml@terraform
#            parameters:
#              SUBSCRIPTION: PROD-PM-SERVICE-CONN
#              ENVIRONMENT: prod
#              WORKINGDIR: 'src/pmanager/network'
#
#  - stage: apply_PROD
#    dependsOn: [plan_PROD]
#    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
#    pool:
#      name: product-prod-linux
#    jobs:
#      # - job: init
#      #   steps:
#      #     # 1. Install terraform
#      #     - template: templates/terraform-setup/template.yaml@terraform
#      - deployment: apply
#        continueOnError: false
#        # dependsOn: init
#        environment: 'PROD'
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - checkout: self
#                # 3. Run terraform apply
#                - template: templates/terraform-apply/template.yaml@terraform
#                  parameters:
#                    SUBSCRIPTION: PROD-PM-SERVICE-CONN
#                    ENVIRONMENT: prod
#                    WORKINGDIR: 'src/pmanager/network'
